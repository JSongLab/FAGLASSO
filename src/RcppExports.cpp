// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matpower_1
arma::mat matpower_1(const arma::mat& a, double alpha, double active_dim);
RcppExport SEXP _FAGLasso_matpower_1(SEXP aSEXP, SEXP alphaSEXP, SEXP active_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type active_dim(active_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(matpower_1(a, alpha, active_dim));
    return rcpp_result_gen;
END_RCPP
}
// fpca_cpp
List fpca_cpp(const List& coefs, const List& GB);
RcppExport SEXP _FAGLasso_fpca_cpp(SEXP coefsSEXP, SEXP GBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< const List& >::type GB(GBSEXP);
    rcpp_result_gen = Rcpp::wrap(fpca_cpp(coefs, GB));
    return rcpp_result_gen;
END_RCPP
}
// soft_thresh
double soft_thresh(double x);
RcppExport SEXP _FAGLasso_soft_thresh(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_thresh(x));
    return rcpp_result_gen;
END_RCPP
}
// f_agL
arma::vec f_agL(const arma::vec& y, const arma::mat& design, const Rcpp::List& cov_mat, const arma::vec& basis_num, const arma::vec& weights, const double& lambda_1, const arma::vec& lambda_2, const arma::mat& Ps, Rcpp::Nullable<Rcpp::NumericVector> initN, bool centered, double active_dim, int max_iter, bool standardnorm);
RcppExport SEXP _FAGLasso_f_agL(SEXP ySEXP, SEXP designSEXP, SEXP cov_matSEXP, SEXP basis_numSEXP, SEXP weightsSEXP, SEXP lambda_1SEXP, SEXP lambda_2SEXP, SEXP PsSEXP, SEXP initNSEXP, SEXP centeredSEXP, SEXP active_dimSEXP, SEXP max_iterSEXP, SEXP standardnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cov_mat(cov_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type basis_num(basis_numSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_1(lambda_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_2(lambda_2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ps(PsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type initN(initNSEXP);
    Rcpp::traits::input_parameter< bool >::type centered(centeredSEXP);
    Rcpp::traits::input_parameter< double >::type active_dim(active_dimSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type standardnorm(standardnormSEXP);
    rcpp_result_gen = Rcpp::wrap(f_agL(y, design, cov_mat, basis_num, weights, lambda_1, lambda_2, Ps, initN, centered, active_dim, max_iter, standardnorm));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _FAGLasso_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FAGLasso_matpower_1", (DL_FUNC) &_FAGLasso_matpower_1, 3},
    {"_FAGLasso_fpca_cpp", (DL_FUNC) &_FAGLasso_fpca_cpp, 2},
    {"_FAGLasso_soft_thresh", (DL_FUNC) &_FAGLasso_soft_thresh, 1},
    {"_FAGLasso_f_agL", (DL_FUNC) &_FAGLasso_f_agL, 13},
    {"_FAGLasso_rcpp_hello_world", (DL_FUNC) &_FAGLasso_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_FAGLasso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
